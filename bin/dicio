#!/usr/bin/env node

'use strict'

const removeAccents = require('desacentuador')
const cheerio = require('cheerio')
const request = require('request-promise')

// Locais
const ArgumentParser = require('../src/ArgumentParser')
const getWordInformations = require('../src/getWordInformations')
const printInformations = require('../src/printInformations')

// Estáticos
const pkg = require('../package.json')

// Nome das opções
const SYNONYMS = 'SYNONYMS'
const DEFINITION = 'DEFINITION'
const NO_MEANING = 'NO_MEANING'
const HELP = 'HELP'
const VERSION = 'VERSION'

const [,, ...args] = process.argv

if (args.length === 0) {
  console.log('dicio: Informe uma palavra.')
  console.log('Uso: dicio <palavra> [...opções]\n')
  console.log('Tente `dicio --help\' para mais informações.')
  process.exit(1)
}

const definitions = [{
  name: SYNONYMS,
  options: [ '--synonyms', '-s' ],
  description: 'Exibe os sinônimos da palavra.',
}, {
  name: DEFINITION,
  options: [ '--definition', '-d' ],
  description: 'Exibe a definição da palavra.'
}, {
  name: NO_MEANING,
  options: [ '--no-meaning', '-m' ],
  description: 'Não exibe o significado da palavra.'
}, {
  name: null,
  options: [ '--no-colors' ],
  description: 'Não exibe cores no terminal.'
}, {
  name: HELP,
  options: [ '--help', '-h', '-?' ],
  description: 'Exibe essa mensagem e sai.'
}, {
  name: VERSION,
  options: [ '--version', '-v' ],
  description: 'Exibe a versão e sai.'
}]

const argData = new ArgumentParser(definitions)

let word
let options

try {
  argData.setArguments(args)

  word = argData.getWord()
  options = argData.getOptions()
} catch (error) {
  console.log(`dicio: ${error.message}`)
  process.exit(1)
}

const hasOption = option => options.includes(option)

if (hasOption(HELP)) {
  logMsgHelp(definitions)
}
if (hasOption(VERSION)) {
  logMsgVersion(pkg.version)
}

const reqOptions = {
  uri: `https://www.dicio.com.br/${removeAccents(word)}/`,
  encoding: 'latin1',
  transform: (body) => cheerio.load(body)
}

const onSuccessReq = ($) => {
  const wordInformations = getWordInformations($)
  printInformations(wordInformations, options)
}

const onErrorReq = (error) => {
  if (error.statusCode === 404) {
    console.log('Palavra não encontrada.')
    process.exit(1)
  }

  console.log('dicio: Error interno.')
  console.log(`código: ${error.statusCode}`)
  console.log(`descrição: ${error.message}`)
  process.exit(1)
}

request(reqOptions)
  .then(onSuccessReq)
  .catch(onErrorReq)

function logMsgHelp(definitions) {
  const SPACE_BETWEEN = 4

  const toStrList = (arr) => arr.join(', ')
  const addSpaces = (str, n) => ' '.repeat(n) + str

  const lens = definitions.map(def => toStrList(def.options).length)
  const maxOptLen = Math.max.apply(null, lens)

  const optionsMsg =  definitions.map((def) => {
    const { options, description } = def
    const listOptions = toStrList(options)
    const spacesCount = SPACE_BETWEEN + maxOptLen - listOptions.length
    const spaces = ' '.repeat(spacesCount)

    return `${listOptions}${spaces}${description}`
  })

  console.log()
  console.log(addSpaces('Uso: dicio <palavra> [opções]'), 2)
  console.log()
  console.log(addSpaces('Opções disponíveis:'), 2)

  console.log(optionsMsg
      .map((str) => addSpaces(str, 4))
      .join('\n'))

   process.exit(0)
}

function logMsgVersion(version) {
  console.log(`Versão ${version}`)
  process.exit(0)
}
